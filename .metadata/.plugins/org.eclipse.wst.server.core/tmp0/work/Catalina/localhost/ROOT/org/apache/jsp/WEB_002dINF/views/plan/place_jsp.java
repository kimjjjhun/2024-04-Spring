/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.86
 * Generated at: 2024-05-27 04:20:11 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.plan;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class place_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(3);
    _jspx_dependants.put("jar:file:/C:/java/Spring/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/Trip04/WEB-INF/lib/jstl-1.2.jar!/META-INF/fmt.tld", Long.valueOf(1153352682000L));
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1712112365428L));
    _jspx_dependants.put("jar:file:/C:/java/Spring/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/Trip04/WEB-INF/lib/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153352682000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(3);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems;
  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fif_0026_005ftest;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _005fjspx_005ftagPool_005fc_005fif_0026_005ftest = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.release();
    _005fjspx_005ftagPool_005fc_005fif_0026_005ftest.release();
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("   \n");
      out.write("   \n");
      out.write("   \n");
      out.write("<!doctype html>\n");
      out.write("<html lang=\"en\">\n");
      out.write("  <head>\n");
      out.write("    <meta charset=\"utf-8\">\n");
      out.write("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n");
      out.write("    <meta name=\"description\" content=\"\">\n");
      out.write("    <meta name=\"author\" content=\"Mark Otto, Jacob Thornton, and Bootstrap contributors\">\n");
      out.write("    <meta name=\"generator\" content=\"Hugo 0.88.1\">\n");
      out.write("    <title>Sidebars · Bootstrap v5.1</title>\n");
      out.write("\n");
      out.write("    <link rel=\"canonical\" href=\"https://getbootstrap.com/docs/5.1/examples/sidebars/\">\n");
      out.write("\n");
      out.write("    \n");
      out.write("\n");
      out.write("    <!-- Bootstrap core CSS -->\n");
      out.write("    <link href=\"../resources/css/modal.css\" rel=\"stylesheet\">\n");
      out.write("    <link href=\"../resources/css/modal2.css\" rel=\"stylesheet\">\n");
      out.write("    <link href=\"../resources/css/calender.css\" rel=\"stylesheet\">\n");
      out.write("<link href=\"../resources/css/bootstrap.min.css\" rel=\"stylesheet\">\n");
      out.write("\n");
      out.write("    <style>\n");
      out.write("    \n");
      out.write("    #place, #place2{\n");
      out.write("    display:none;}\n");
      out.write("    \n");
      out.write("    #place {position:relative; padding-right:10px;}\n");
      out.write("    \n");
      out.write("    #place2 {position:absolute; right:-89%; top:0; z-index:10; height:100%; border-left:1px solid #ddd;}\n");
      out.write("    \n");
      out.write("    #sleep{position:relative; padding-right:10px;}\n");
      out.write("    \n");
      out.write("    #sleep2{position:absolute; right:-89%; top:0; z-index:10; height:100%; border-left:1px solid #ddd;}\n");
      out.write("    \n");
      out.write("    #sleep, #sleep2{\n");
      out.write("    display:none;}\n");
      out.write("    \n");
      out.write("      .bd-placeholder-img {\n");
      out.write("        font-size: 1.125rem;\n");
      out.write("        text-anchor: middle;\n");
      out.write("        -webkit-user-select: none;\n");
      out.write("        -moz-user-select: none;\n");
      out.write("        user-select: none;\n");
      out.write("      }\n");
      out.write("\n");
      out.write("      @media (min-width: 768px) {\n");
      out.write("        .bd-placeholder-img-lg {\n");
      out.write("          font-size: 3.5rem;\n");
      out.write("        }\n");
      out.write("      }\n");
      out.write("      \n");
      out.write("      input[type=\"text\"] {\n");
      out.write("    width: 94px; /* 원하는 너비 값으로 조정 */\n");
      out.write("}\n");
      out.write("\n");
      out.write(".set{\n");
      out.write("display:inline-block;}\n");
      out.write("\n");
      out.write(".timeSetter{\n");
      out.write("display:inline-block;}\n");
      out.write("\n");
      out.write("ul ,li , ins {\n");
      out.write("    text-decoration: none; /* 밑줄 제거 */\n");
      out.write("    list-style-type: none;\n");
      out.write("    /* 다른 스타일 적용 */\n");
      out.write("}\n");
      out.write("ul , li{\n");
      out.write("width:80px;\n");
      out.write("}\n");
      out.write("li{\n");
      out.write("display:inline-block;}\n");
      out.write("\n");
      out.write("#day{width:500px;}\n");
      out.write("\n");
      out.write("#timeInput{\n");
      out.write("width:115px;\n");
      out.write("}\n");
      out.write("    </style>\n");
      out.write("\n");
      out.write("    \n");
      out.write("    <!-- Custom styles for this template -->\n");
      out.write("  </head>\n");
      out.write("  <body>\n");
      out.write("\n");
      out.write("<main>\n");
      out.write("  <h1 class=\"visually-hidden\">Sidebars examples</h1>\n");
      out.write("\n");
      out.write("  <div class=\"d-flex flex-column flex-shrink-0 bg-light\" style=\"width: 4.5rem;\">\n");
      out.write("    <a href=\"/\" class=\"d-block p-3 link-dark text-decoration-none\" title=\"Icon-only\" data-bs-toggle=\"tooltip\" data-bs-placement=\"right\">\n");
      out.write("      <svg class=\"bi\" width=\"40\" height=\"32\"><use xlink:href=\"#bootstrap\"/></svg>\n");
      out.write("      <span class=\"visually-hidden\">Icon-only</span>\n");
      out.write("    </a>\n");
      out.write("    <ul class=\"nav nav-pills nav-flush flex-column mb-auto text-center\">\n");
      out.write("      <li class=\"nav-item\">\n");
      out.write("      <a href=\"#link1\" class=\"step1\">STEP1<br>날짜 확인</a>\n");
      out.write("       <!--  <a href=\"#\" class=\"nav-link active py-3 border-bottom\" aria-current=\"page\" title=\"Home\" data-bs-toggle=\"tooltip\" data-bs-placement=\"right\">\n");
      out.write("          <svg class=\"bi\" width=\"24\" height=\"24\" role=\"img\" aria-label=\"Home\"><use xlink:href=\"#home\"/></svg>\n");
      out.write("        </a> 메뉴바 1번째 칸~-->\n");
      out.write("      </li>\n");
      out.write("      <li>\n");
      out.write("      <a href=\"#link2\" class=\"step2\">STEP2<br>장소 선택</a>\n");
      out.write("        <!-- <a href=\"#\" class=\"nav-link py-3 border-bottom\" title=\"Dashboard\" data-bs-toggle=\"tooltip\" data-bs-placement=\"right\">\n");
      out.write("          <svg class=\"bi\" width=\"24\" height=\"24\" role=\"img\" aria-label=\"Dashboard\"><use xlink:href=\"#speedometer2\"/></svg>\n");
      out.write("        </a> 메뉴바 2번째 칸-->\n");
      out.write("      </li>\n");
      out.write("      <li>\n");
      out.write("      <a href=\"#link3\" class=\"step3\">STEP3<br>숙소 설정</a>\n");
      out.write("        <!-- <a href=\"#\" class=\"nav-link py-3 border-bottom\" title=\"Orders\" data-bs-toggle=\"tooltip\" data-bs-placement=\"right\">\n");
      out.write("          <svg class=\"bi\" width=\"24\" height=\"24\" role=\"img\" aria-label=\"Orders\"><use xlink:href=\"#table\"/></svg>\n");
      out.write("        </a> 메뉴바 3번째 칸-->\n");
      out.write("      </li>\n");
      out.write("      <li>\n");
      out.write("        <a href=\"#\" class=\"nav-link py-3 border-bottom\" title=\"Products\" data-bs-toggle=\"tooltip\" data-bs-placement=\"right\">\n");
      out.write("          <svg class=\"bi\" width=\"24\" height=\"24\" role=\"img\" aria-label=\"Products\"><use xlink:href=\"#grid\"/></svg>\n");
      out.write("        </a>\n");
      out.write("      </li>\n");
      out.write("      <li>\n");
      out.write("        <a href=\"#\" class=\"nav-link py-3 border-bottom\" title=\"Customers\" data-bs-toggle=\"tooltip\" data-bs-placement=\"right\">\n");
      out.write("          <svg class=\"bi\" width=\"24\" height=\"24\" role=\"img\" aria-label=\"Customers\"><use xlink:href=\"#people-circle\"/></svg>\n");
      out.write("        </a>\n");
      out.write("      </li>\n");
      out.write("      <li>\n");
      out.write("      </li>\n");
      out.write("      <li>\n");
      out.write("      </li>\n");
      out.write("      <li>\n");
      out.write("      <button class = \"objsubmit\">일정생성</button>\n");
      out.write("      </li>\n");
      out.write("    </ul>\n");
      out.write("  </div>\n");
      out.write("<!-- modal -->\n");
      out.write("\n");
      out.write("<!-- modalEnd -->\n");
      out.write("<form id =\"places\" action=\"/plan/library\" method=\"get\">\n");
      out.write("<!-- 날짜 선택 --><!-- 날짜 선택 --><!-- 날짜 선택 --><!-- 날짜 선택 --><!-- 날짜 선택 --><!-- 날짜 선택 -->\n");
      out.write("<div id =\"day\">\n");
      out.write("\n");
      out.write("<div class=\"d-flex flex-column align-items-stretch flex-shrink-0 bg-white\" style=\"width: 380px;\">\n");
      out.write("<h2 style=\"font-weight:bold; margin-top: 10px;\">");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${areaname }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("</h2>\n");
      out.write("<h5 id=\"dateRange\" style=\"font-weight:bold;\"></h5>\n");
      out.write("\n");
      out.write("<div class=\"timeSetter\">\n");
      out.write("<h6 style=\"font-family: fantasy; font-size: 25px; margin-bottom: 50px; margin-top: 30px;\">여행시간 상세설정</h6>\n");
      out.write("<label class=\"selectDayBtn\" for=\"modal-toggle\"><input type=\"text\" class=\"totalTime\" value=\"총시간\" readonly=\"readonly\" style=\"border: none; width:300px; color: blue;\">\n");
      out.write("<br>\n");
      out.write("<div style=\"margin-top: 50px;\">입력하신 여행 기간이 시차를 고려한 <b>현지 여행 기간(여행지 도착 날짜, 여행지 출발 날짜)</b>이 맞는지 확인해 주시고 각 날짜의 일정 <b>시작시간</b>과 <b>종료시간</b>을 현지 시간 기준으로 설정해 주세요. 기본 설정 시간은 <b>오전 10시~오후 10시 총 12시간</b>입니다.\n");
      out.write("</div><br><p style=\"font-family: fantasy; font-size: 25px;\">일정 수정하기<img alt=\"\" src=\"../resources/image/left.png\"> </p></label><br>\n");
      out.write("\n");
      out.write("<div class=\"flex flex-col items-center w-full py-4 \">\n");
      out.write("<table class=\"w-full text-sm text-center bg-white\">\n");
      out.write("<thead class=\"text-xs bg-white \">\n");
      out.write("<tr>\n");
      out.write("<th scope=\"col\" class=\"p-1 md:p-2 whitespace-nowrap bg-[#fafafa] font-normal\">일자</th>\n");
      out.write("<th scope=\"col\" class=\"p-1 md:p-2 whitespace-nowrap bg-[#fafafa] font-normal\">요일</th>\n");
      out.write("<th scope=\"col\" class=\"p-1 md:p-2 whitespace-nowrap bg-[#fafafa] font-normal\">시작시간</th>\n");
      out.write("<th scope=\"col\" class=\"p-1 md:p-2 whitespace-nowrap bg-[#fafafa] font-normal\">종료시간</th>\n");
      out.write("</tr>\n");
      out.write("</thead>\n");
      out.write("<tbody>\n");
      out.write("<tr class=\"bg-white font-Montserrat\">\n");
      out.write("<td class=\"p-1.5\"><ins class=\"date2\"></ins></td>\n");
      out.write("<td class=\"p-1.5\"><ins class=\"date3\"></ins></td>\n");
      out.write("<td class=\"p-1.5\"><ins class=\"date4\"></ins></td>\n");
      out.write("<td class=\"p-1.5\"><ins class=\"date5\"></ins></td>\n");
      out.write("</tr>\n");
      out.write("</tbody>\n");
      out.write("</table>\n");
      out.write("</div>\n");
      out.write("<button class=\"flex items-center justify-center w-full p-2 mt-4 text-sm text-white bg-black rounded-md md:mt-0 font-Montserrat\" style=\"margin-left: 150px; border-radius:20px;\">시간 설정 완료</button>\n");
      out.write("</div>\n");
      out.write("</div>\n");
      out.write("<div class=\"modal-container\">\n");
      out.write("  <input id=\"modal-toggle\" type=\"checkbox\">\n");
      out.write("  \n");
      out.write("  <label class=\"modal-backdrop\" for=\"modal-toggle\"></label>\n");
      out.write("  <div class=\"modal-content\">\n");
      out.write("    <label class=\"modal-close\" for=\"modal-toggle\">&#x2715;</label>\n");
      out.write("    <h2>여행 기간을 선택해주세요</h2><hr />\n");
      out.write("    <!-- 달력 추가 -->\n");
      out.write("<div id=\"app\"></div>\n");
      out.write("\n");
      out.write("<!-- 달력 끝 -->\n");
      out.write("  </div>          \n");
      out.write("</div>  \n");
      out.write("</div>\n");
      out.write("\n");
      out.write("<!-- 날짜 선택End --><!-- 날짜 선택End --><!-- 날짜 선택End --><!-- 날짜 선택End --><!-- 날짜 선택End -->\n");
      out.write("<!-- 장소 선택 --><!-- 장소 선택 --><!-- 장소 선택 --><!-- 장소 선택 --><!-- 장소 선택 --><!-- 장소 선택 -->\n");
      out.write("<div id =\"place\">\n");
      out.write("  <div class=\"d-flex flex-column align-items-stretch flex-shrink-0 bg-white\" style=\"width: 380px;\">\n");
      out.write("      <span class=\"fs-5 fw-semibold\">");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${areaname }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("</span>\n");
      out.write("                  <input type=\"hidden\" id=\"lat\" name=\"lat\" value=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${area.lat}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\">\n");
      out.write("            <input type=\"hidden\" id=\"lng\" name=\"lng\"  value=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${area.lng}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\">\n");
      out.write("      <div class=\"pac-card\" id=\"pac-controls\">\n");
      out.write("         <div>\n");
      out.write("            <div id=\"title\">\n");
      out.write("               Autocomplete search\n");
      out.write("            </div>\n");
      out.write("            <div id=\"type-selector\" class=\"pac-controls\" style=\"backgroundcolor:skyblue;\">\n");
      out.write("               <input type=\"radio\" name=\"type\" id=\"changetype-all\" checked=\"checked\">\n");
      out.write("               <label for=\"changetype-all\">All</label>\n");
      out.write("               \n");
      out.write("               <input type=\"radio\" name=\"type\" id=\"changetype-establishment\">\n");
      out.write("               <label for=\"changetype-establishment\">Establishments</label>\n");
      out.write("\n");
      out.write("               <input type=\"radio\" name=\"type\" id=\"changetype-address\">\n");
      out.write("               <label for=\"changetype-address\">Addresses</label>\n");
      out.write("\n");
      out.write("               <input type=\"radio\" name=\"type\" id=\"changetype-geocode\">\n");
      out.write("               <label for=\"changetype-geocode\">Geocodes</label>\n");
      out.write("            </div>\n");
      out.write("            <div id=\"strict-bounds-selector\" class=\"pac-controls\">\n");
      out.write("               <input type=\"checkbox\" id=\"use-strict-bounds\" value=\"\">\n");
      out.write("               <label for=\"use-strict-bounds\">Strict Bounds</label>\n");
      out.write("            </div>\n");
      out.write("         </div>\n");
      out.write("         <div id=\"pac-container\">\n");
      out.write("            <input id=\"pac-input\" type=\"text\" placeholder=\"Enter a location\">\n");
      out.write("         </div>\n");
      out.write("      </div>\n");
      out.write("      <div id=\"map\"></div>\n");
      out.write("      <div id=\"infowindow-content\">\n");
      out.write("         <img src=\"\" width=\"16\" height=\"16\" id=\"plage-icon\">\n");
      out.write("         <span id=\"place-name\" class=\"title\"></span><br>\n");
      out.write("         <span id=\"place-address\"></span>\n");
      out.write("      </div>\n");
      out.write("      <div class=\"list-group list-group-flush border-bottom scrollarea\" >\n");
      out.write("      ");
      if (_jspx_meth_c_005fforEach_005f0(_jspx_page_context))
        return;
      out.write("\n");
      out.write("      </div>\n");
      out.write("  </div>\n");
      out.write("  \n");
      out.write("  <div id=\"place2\" class=\"flex-shrink-0 p-3 bg-white\" style=\"width: 350px;\">\n");
      out.write("    <a href=\"/\" class=\"d-flex align-items-center pb-3 mb-3 link-dark text-decoration-none border-bottom\">\n");
      out.write("      <svg class=\"bi me-2\" \n");
      out.write("      width=\"30\" height=\"24\" style=\"margin-top:15px;\"><use xlink:href=\"#bootstrap\"/></svg>\n");
      out.write("      <span id=\"totalRunTime\"></span>\n");
      out.write("    </a>\n");
      out.write("         <div class=\"chooseContent\" style=\"border:1px;\">\n");
      out.write("         </div>\n");
      out.write("  </div>\n");
      out.write("  </div>\n");
      out.write(" \n");
      out.write(" \n");
      out.write("  <!-- 장소 선택End --><!-- 장소 선택End --><!-- 장소 선택End --><!-- 장소 선택End --><!-- 장소 선택End --><!-- 장소 선택End -->\n");
      out.write("  \n");
      out.write("  <!-- 숙소 선택 --><!-- 숙소 선택 --><!-- 숙소 선택 --><!-- 숙소 선택 --><!-- 숙소 선택 --><!-- 숙소 선택 -->\n");
      out.write("  <div id=\"sleep\">\n");
      out.write("    <div class=\"d-flex flex-column align-items-stretch flex-shrink-0 bg-white\" style=\"width: 380px;\">\n");
      out.write("      <span class=\"fs-5 fw-semibold\">숙소 선택</span>\n");
      out.write("      \n");
      out.write("      <div class=\"pac-card\" id=\"pac-controls\">\n");
      out.write("         <div>\n");
      out.write("            <div id=\"title\">\n");
      out.write("               Autocomplete search\n");
      out.write("            </div>\n");
      out.write("            <div id=\"type-selector\" class=\"pac-controls\" style=\"backgroundcolor:skyblue;\">\n");
      out.write("               <input type=\"radio\" name=\"type\" id=\"changetype-all\" checked=\"checked\">\n");
      out.write("               <label for=\"changetype-all\">All</label>\n");
      out.write("               \n");
      out.write("               <input type=\"radio\" name=\"type\" id=\"changetype-establishment\">\n");
      out.write("               <label for=\"changetype-establishment\">Establishments</label>\n");
      out.write("\n");
      out.write("               <input type=\"radio\" name=\"type\" id=\"changetype-address\">\n");
      out.write("               <label for=\"changetype-address\">Addresses</label>\n");
      out.write("\n");
      out.write("               <input type=\"radio\" name=\"type\" id=\"changetype-geocode\">\n");
      out.write("               <label for=\"changetype-geocode\">Geocodes</label>\n");
      out.write("            </div>\n");
      out.write("            <div id=\"strict-bounds-selector\" class=\"pac-controls\">\n");
      out.write("               <input type=\"checkbox\" id=\"use-strict-bounds\" value=\"\">\n");
      out.write("               <label for=\"use-strict-bounds\">Strict Bounds</label>\n");
      out.write("            </div>\n");
      out.write("         </div>\n");
      out.write("         <div id=\"pac-container\">\n");
      out.write("            <input id=\"pac-input\" type=\"text\" placeholder=\"Enter a location\">\n");
      out.write("         </div>\n");
      out.write("      </div>\n");
      out.write("      <div id=\"map\"></div>\n");
      out.write("      <div id=\"infowindow-content\">\n");
      out.write("         <img src=\"\" width=\"16\" height=\"16\" id=\"plage-icon\">\n");
      out.write("         <span id=\"place-name\" class=\"title\"></span><br>\n");
      out.write("         <span id=\"place-address\"></span>\n");
      out.write("      </div>\n");
      out.write("      <div class=\"list-group list-group-flush border-bottom scrollarea\" >\n");
      out.write("      ");
      if (_jspx_meth_c_005fforEach_005f1(_jspx_page_context))
        return;
      out.write("\n");
      out.write("      </div>\n");
      out.write("  </div>\n");
      out.write("  <div id=\"sleep2\" class=\"flex-shrink-0 p-3 bg-white\" style=\"width: 350px;\">\n");
      out.write("    <a href=\"/\" class=\"d-flex align-items-center pb-3 mb-3 link-dark text-decoration-none border-bottom\">\n");
      out.write("      <svg class=\"bi me-2\" width=\"30\" height=\"24\" style=\"margin-top:15px;\"><use xlink:href=\"#bootstrap\"/></svg>\n");
      out.write("      <span class=\"fs-5 fw-semibold\" style=\"margin-top:5px; padding-top:10px;\">숙소 선택 </span>\n");
      out.write("      <span class=\"fs-5 fw-semibold\" id=\"daysdiff\" style=\"margin-top:5px; padding-top:10px;\"></span>\n");
      out.write("    </a>\n");
      out.write("         <div class=\"chooseSleep\" style=\"border:1px;\">\n");
      out.write("         </div>\n");
      out.write("  </div>\n");
      out.write("  </div>\n");
      out.write(" \n");
      out.write("  <!-- 숙소 선택End --><!-- 숙소 선택End --><!-- 숙소 선택End --><!-- 숙소 선택End --><!-- 숙소 선택End --><!-- 숙소 선택End -->\n");
      out.write("  </form>\n");
      out.write("  <!-- The Modal -->\n");
      out.write("  <div class=\"modal\" id=\"myModal\">\n");
      out.write("    <div class=\"modal-dialog\">\n");
      out.write("      <div class=\"modal-content\">\n");
      out.write("      \n");
      out.write("        <!-- Modal Header -->\n");
      out.write("        <div class=\"modal-header\">\n");
      out.write("          <h4 class=\"modal-title\"><input name=\"contentName\" value=\"contentName\" readonly=\"readonly\" style=\"border:none;\"></h4>\n");
      out.write("          <button type=\"button\" class=\"close\" data-dismiss=\"modal\">&times;</button>\n");
      out.write("        </div>\n");
      out.write("        \n");
      out.write("        <!-- Modal body -->\n");
      out.write("        <div class=\"modal-body\">\n");
      out.write("        <input name=\"contentType\" value=\"contentType\" readonly=\"readonly\" style=\"border:none;\"><br>\n");
      out.write("        <input name=\"contentAdd\" value=\"contentAdd\" readonly=\"readonly\" style=\"border:none;\">\n");
      out.write("        </div>\n");
      out.write("        \n");
      out.write("        <!-- Modal footer -->\n");
      out.write("        <div class=\"modal-footer\">\n");
      out.write("        </div>\n");
      out.write("        \n");
      out.write("      </div>\n");
      out.write("    </div>\n");
      out.write("  </div>\n");
      out.write("<div>\n");
      out.write("<div id=\"googleMap\" style=\"position:absolute; display:inline-block; width: 80%;height:100%;\"></div>\n");
      out.write("</div>\n");
      out.write("</main>\n");
      out.write("\n");
      out.write(" \n");
      out.write("\n");
      out.write("    <script src=\"../resources/js/bootstrap.bundle.min.js\"></script>\n");
      out.write("\n");
      out.write("      <script src=\"../resources/js/sidebars.js\"></script>\n");
      out.write("<script src=\"https://unpkg.com/react@17/umd/react.development.js\"></script>\n");
      out.write("<script src=\"https://unpkg.com/react-dom@17/umd/react-dom.development.js\"></script>\n");
      out.write("  </body>\n");
      out.write("  \n");
      out.write("  \n");
      out.write("  <script>\n");
      out.write("  window.addEventListener('DOMContentLoaded', function() {\n");
      out.write("	    var modalToggle = document.getElementById('modal-toggle');\n");
      out.write("	    modalToggle.checked = true; // 모달 창 체크 박스를 선택하여 모달이 열리도록 설정\n");
      out.write("	  });\n");
      out.write("  </script>\n");
      out.write("<script>\n");
      out.write("/*Selector Range*/\n");
      out.write("class Range extends React.Component {\n");
      out.write("    constructor(props) {\n");
      out.write("        super(props);\n");
      out.write("        this.monthNames = [\"1월\", \"2월\", \"3월\", \"4월\", \"5월\", \"6월\",\n");
      out.write("            \"7월\", \"8월\", \"9월\", \"10월\", \"11월\", \"12월\"];\n");
      out.write("        this.daysNames = ['일요일', '월요일', '화요일', '수요일', '목요일', '금요일', '토요일'];\n");
      out.write("    }\n");
      out.write("    dateInfo(date){\n");
      out.write("        let dateRow;\n");
      out.write("        let rangeMonthText = 'Choose a date';\n");
      out.write("        if(date){\n");
      out.write("            dateRow = React.createElement('td', { rowSpan: '2' }, React.createElement('span', { className: 'calendar__range-date' }, date.getDate()));\n");
      out.write("            rangeMonthText = this.monthNames[date.getMonth()]+' '+ date.getFullYear();\n");
      out.write("        }\n");
      out.write("        return (\n");
      out.write("            React.createElement('tr', null,\n");
      out.write("                dateRow,\n");
      out.write("                React.createElement('td', null,\n");
      out.write("                    React.createElement('span', { className: \"calendar__range-month\" },\n");
      out.write("                        rangeMonthText\n");
      out.write("                    )\n");
      out.write("                )\n");
      out.write("            )\n");
      out.write("        );\n");
      out.write("    }\n");
      out.write("    dumbDate(date, title){\n");
      out.write("        let day = (date)?(React.createElement('tr', null,\n");
      out.write("            React.createElement('td', null,\n");
      out.write("                React.createElement('span', { className: 'calendar__range-day' }, this.daysNames[date.getDay()])\n");
      out.write("            )\n");
      out.write("        )):null;\n");
      out.write("        return (React.createElement('div', { className: 'calendar__from-date' },\n");
      out.write("            React.createElement('table', null,\n");
      out.write("                React.createElement('tbody', null,\n");
      out.write("                    React.createElement('tr', null,\n");
      out.write("                        React.createElement('td', { colSpan: '2' },\n");
      out.write("                            React.createElement('span', { className: 'calendar__range-h' }, title)\n");
      out.write("                        )\n");
      out.write("                    ),\n");
      out.write("                    this.dateInfo(date),\n");
      out.write("                    day\n");
      out.write("                )\n");
      out.write("            )\n");
      out.write("        ));\n");
      out.write("        console.log(day)\n");
      out.write("        console.log(date)\n");
      out.write("    }\n");
      out.write("    render() {\n");
      out.write("        let {dateFrom, dateTo} = this.props;\n");
      out.write("        dateTo = dateTo ? new Date(dateTo) : dateTo;\n");
      out.write("        dateFrom = dateFrom ? new Date(dateFrom) : dateFrom;\n");
      out.write("        return (React.createElement('div', { className: 'calendar__range' },\n");
      out.write("            this.dumbDate(dateFrom,'시작 날'),\n");
      out.write("            React.createElement('div', { className: 'calendar__image-arrow' },\n");
      out.write("                React.createElement('span', null, \"\\u2192\")\n");
      out.write("            ),\n");
      out.write("            this.dumbDate(dateTo,'마지막 날')\n");
      out.write("        ));\n");
      out.write("    }\n");
      out.write("}\n");
      out.write("/*Header Table*/\n");
      out.write("class Header extends React.Component {\n");
      out.write("    constructor(props) {\n");
      out.write("        super(props);\n");
      out.write("        this.monthNames = [\"1월\", \"2월\", \"3월\", \"4월\", \"5월\", \"6월\",\n");
      out.write("            \"7월\", \"8월\", \"9월\", \"10월\", \"11월\", \"12월\"];\n");
      out.write("        this.dayNames = ['MON', 'TUE', 'WED', 'THU', 'FRI', 'SAT', 'SUN'];\n");
      out.write("    }\n");
      out.write("    shouldComponentUpdate(nextProps){\n");
      out.write("        return nextProps.date != this.props.date;\n");
      out.write("    }\n");
      out.write("    render() {\n");
      out.write("        let date  = new Date(this.props.date);\n");
      out.write("        return (React.createElement('div', { className: 'calendar__header' },\n");
      out.write("            React.createElement('div', { className: 'calendar__month-chooser' },\n");
      out.write("                React.createElement('span', { className: 'calendar__prev-month', onClick: this.props.prevMonth }, \"\\u2B80\"),\n");
      out.write("                React.createElement('span', null, this.monthNames[date.getMonth()]),\n");
      out.write("                React.createElement('span', { className: 'calendar__next-month', onClick: this.props.nextMonth }, \"\\u27A1\")\n");
      out.write("            ),\n");
      out.write("            React.createElement('table', { className: 'calendar__days-names', cellSpacing: '0' },\n");
      out.write("                React.createElement('tbody', null,\n");
      out.write("                    React.createElement('tr', null,\n");
      out.write("                        this.dayNames.map((i, key)=> React.createElement('td', { className: 'calendar__day-name', key: key }, i))\n");
      out.write("                    )\n");
      out.write("                )\n");
      out.write("            )\n");
      out.write("        ));\n");
      out.write("    }\n");
      out.write("}\n");
      out.write("\n");
      out.write("/*Calendar Table*/\n");
      out.write("/*Calendar Table*/\n");
      out.write("class Calendar extends React.Component{\n");
      out.write("    constructor(props){\n");
      out.write("        super(props);\n");
      out.write("        this.selectionEnabled = false;\n");
      out.write("        this.shortMonthNames = ['Jan','Feb','Mar','Apr','May','June','July','Aug','Sept','Oct','Nov','Dec']\n");
      out.write("        this.currentDate = new Date();\n");
      out.write("        this.state = {\n");
      out.write("            animationDirection: \"forward\" // animationDirection 초기화\n");
      out.write("        };\n");
      out.write("    }\n");
      out.write("    handleClick(index){\n");
      out.write("        let {setRange, indexStart, indexEnd} = this.props;\n");
      out.write("        if(this.selectionEnabled ){\n");
      out.write("            if((index == indexStart)){\n");
      out.write("                this.selectionEnabled = false;\n");
      out.write("                setRange();\n");
      out.write("            }else{\n");
      out.write("                this.selectionEnabled = false;\n");
      out.write("                setRange(this.props.indexStart, index);\n");
      out.write("            }\n");
      out.write("        }else{\n");
      out.write("            if(index == indexEnd){\n");
      out.write("                this.selectionEnabled = true;\n");
      out.write("            }else{\n");
      out.write("                this.selectionEnabled = true;\n");
      out.write("                setRange(index);\n");
      out.write("            }\n");
      out.write("        }\n");
      out.write("    }\n");
      out.write("    mouseOver(index){\n");
      out.write("        if(this.selectionEnabled){\n");
      out.write("            this.props.setRange(this.props.indexStart, index);\n");
      out.write("        }\n");
      out.write("    }\n");
      out.write("    componentDidUpdate(prevProps, prevState) {\n");
      out.write("        if (prevProps.animationDirection !== this.props.animationDirection) { // 수정\n");
      out.write("            const calendar = document.querySelector('.calendar__table');\n");
      out.write("            const { animationDirection } = this.props; // 수정\n");
      out.write("\n");
      out.write("            if (animationDirection === 'forward') {\n");
      out.write("                calendar.classList.add('animate--forward');\n");
      out.write("                calendar.classList.remove('animate--backward');\n");
      out.write("            } else if (animationDirection === 'backward') {\n");
      out.write("                calendar.classList.add('animate--backward');\n");
      out.write("                calendar.classList.remove('animate--forward');\n");
      out.write("            }\n");
      out.write("        }\n");
      out.write("    }\n");
      out.write("    getDay(date, key, month){\n");
      out.write("        let time = date.getTime();\n");
      out.write("        let currentDate = this.currentDate;\n");
      out.write("        let {indexEnd, indexStart} = this.props;\n");
      out.write("        let dayClass = (time > indexStart && time < indexEnd) ? 'selected' : '';\n");
      out.write("        dayClass += ( date < currentDate.setHours(0)) ?' out--range':'';\n");
      out.write("        dayClass += (time == indexStart && indexEnd > indexStart) ? ' sel--start' : '';\n");
      out.write("        dayClass += (time == indexEnd && time > indexStart) ? ' sel--end' : '';\n");
      out.write("        dayClass += (date.getMonth() == month)?' calendar__day':' calendar__day dis';\n");
      out.write("        return(React.createElement('td', { className: dayClass,\n");
      out.write("            onClick: this.handleClick.bind(this, time),\n");
      out.write("            onMouseOver: this.mouseOver.bind(this,time),\n");
      out.write("            key: key },\n");
      out.write("            React.createElement('div', { className: 'calendar__inner-day' }, date.getDate())\n");
      out.write("        ));\n");
      out.write("    }\n");
      out.write("    render(){\n");
      out.write("        let date  = new Date(this.props.date);\n");
      out.write("        let month = date.getMonth();\n");
      out.write("        date.setDate(1);\n");
      out.write("        if(this.animationDirection == \"forward\"){\n");
      out.write("            date.setMonth(date.getMonth() - 1);\n");
      out.write("        }\n");
      out.write("        let firstDay = date.getDay();\n");
      out.write("        if(firstDay !== 1){\n");
      out.write("            (firstDay == 0)?\n");
      out.write("                date.setDate(date.getDate() - 6)\n");
      out.write("                :date.setDate(date.getDate() - (firstDay - 1));\n");
      out.write("        }\n");
      out.write("        date.setDate(date.getDate() - 1);\n");
      out.write("        return(React.createElement('div', { className: 'calendar__wrap' },\n");
      out.write("            React.createElement('table', { className: 'calendar__table', ref: 'calendar', key: this.props.date, cellSpacing: '0' },\n");
      out.write("                React.createElement('tbody', null,\n");
      out.write("                    Array(12).fill(0).map((i, key)=> {\n");
      out.write("                        return React.createElement('tr', { key: key },\n");
      out.write("                            Array(7).fill(0).map((_i, _key)=> {\n");
      out.write("                                date.setDate(date.getDate() + 1);\n");
      out.write("                                return this.getDay(date, _key, month);\n");
      out.write("                            })\n");
      out.write("                        );\n");
      out.write("                    })\n");
      out.write("                )\n");
      out.write("            )\n");
      out.write("        ));\n");
      out.write("    }\n");
      out.write("}\n");
      out.write("\n");
      out.write("\n");
      out.write("/*Smart Component*/\n");
      out.write("class APP extends React.Component {\n");
      out.write("    constructor(props){\n");
      out.write("        super(props);\n");
      out.write("        this.state = {\n");
      out.write("            date:Date.now(),\n");
      out.write("            selectionStart: 0,\n");
      out.write("            selectionEnd: 0\n");
      out.write("        }\n");
      out.write("    }\n");
      out.write("    prevMonth(){\n");
      out.write("        let date = new Date(this.state.date);\n");
      out.write("        date.setMonth(date.getMonth() - 1);\n");
      out.write("        this.setState({date:date.getTime()});\n");
      out.write("    }\n");
      out.write("    nextMonth(){\n");
      out.write("        let date = new Date(this.state.date);\n");
      out.write("        date.setMonth(date.getMonth() + 1);\n");
      out.write("        this.setState({date:date.getTime()});\n");
      out.write("    }\n");
      out.write("    setRange(selectionStart = 0, selectionEnd = 0){\n");
      out.write("    	\n");
      out.write("        this.setState({selectionStart, selectionEnd});\n");
      out.write("\n");
      out.write("    }  handleDaySelection() {\n");
      out.write("        let { selectionStart, selectionEnd } = this.state;\n");
      out.write("        console.log(\"시작 날\" + selectionStart);\n");
      out.write("        console.log(\"끝나는 날\" + selectionEnd);\n");
      out.write("        // 여기에 선택한 날짜로 할 일을 추가하세요\n");
      out.write("    }\n");
      out.write("    render(){\n");
      out.write("\n");
      out.write("        let {date, selectionStart, selectionEnd} = this.state;\n");
      out.write("        return (React.createElement('div', { className: 'calendar' },\n");
      out.write("            React.createElement(Range, { dateFrom: selectionStart, dateTo: selectionEnd }),\n");
      out.write("            React.createElement(Header, { date: date, prevMonth: this.prevMonth.bind(this), nextMonth: this.nextMonth.bind(this) }),\n");
      out.write("            React.createElement(Calendar, { date: date, indexStart: selectionStart, indexEnd: selectionEnd, setRange: this.setRange.bind(this) }),\n");
      out.write("              React.createElement('button', { id: 'selectDay',type:'button', onClick: this.handleDaySelection.bind(this) }, '선택한 날짜 확인')\n");
      out.write("              \n");
      out.write("        ));\n");
      out.write("    }\n");
      out.write("    \n");
      out.write("}\n");
      out.write("\n");
      out.write("ReactDOM.render(React.createElement(APP, null), document.querySelector('#app'));\n");
      out.write("</script>\n");
      out.write("   <script>\n");
      out.write("   function myMap() {\n");
      out.write("		\n");
      out.write(" 	  var lat = parseFloat(document.getElementById(\"lat\").value);\n");
      out.write(" 	  var lng = parseFloat(document.getElementById(\"lng\").value);\n");
      out.write(" 	  \n");
      out.write(" 	  console.log(lat);\n");
      out.write(" 	  console.log(lng);\n");
      out.write(" 	  \n");
      out.write("     const myLatLng = { lat: lat, lng: lng};\n");
      out.write("\n");
      out.write("     var marker;\n");
      out.write("     var label;\n");
      out.write("     var flightPath;\n");
      out.write("     \n");
      out.write("     var map = new google.maps.Map(document.getElementById(\"googleMap\"), {\n");
      out.write("       zoom:11,\n");
      out.write("       center: myLatLng\n");
      out.write("     });\n");
      out.write("\n");
      out.write("     var geocoder = new google.maps.Geocoder();\n");
      out.write("\n");
      out.write("     console.log('지도 진입');\n");
      out.write("\n");
      out.write("     document.body.addEventListener('click', function (event) {\n");
      out.write("       if (event.target && event.target.matches('.checkBtn')) {\n");
      out.write("         console.log('버튼 클릭 이벤트 실행');\n");
      out.write("         var addr2Input = event.target.previousElementSibling;\n");
      out.write("         console.log('이건 됨?')\n");
      out.write("         if (addr2Input) {\n");
      out.write("           var address = addr2Input.value;\n");
      out.write("           console.log('입력된 주소:', address);\n");
      out.write("           geocodeAddress(geocoder, map, address);\n");
      out.write("         }\n");
      out.write("       }\n");
      out.write("\n");
      out.write("       if (event.target && event.target.matches(\".deleteBtn\")) {\n");
      out.write("         console.log(\"삭제 버튼 동작\");\n");
      out.write("         var index = parseInt(event.target.getAttribute('data-index'), 10);\n");
      out.write("         deleteMarker(index);\n");
      out.write("       }\n");
      out.write("\n");
      out.write("     });\n");
      out.write("\n");
      out.write("     const labels = \"123456789\";\n");
      out.write("     let labelIndex = 0;\n");
      out.write("     var markers = [];\n");
      out.write("\n");
      out.write("     function geocodeAddress(geocoder, resultMap, address) {\n");
      out.write("       console.log('지오코딩 함수 실행');\n");
      out.write("\n");
      out.write("       geocoder.geocode({ 'address': address }, function (result, status) {\n");
      out.write("         console.log('지오코딩 결과:', result);\n");
      out.write("         console.log('지오코딩 상태:', status);\n");
      out.write("\n");
      out.write("         if (status === 'OK') {\n");
      out.write("           resultMap.setCenter(result[0].geometry.location);\n");
      out.write("           resultMap.setZoom(18);\n");
      out.write("           var image = {\n");
      out.write("             url: \"../resources/image/주석_2024-05-21_153140-removebg-preview.png\", // 아이콘 이미지 경로\n");
      out.write("             scaledSize: new google.maps.Size(55, 55), // 아이콘 크기 설정 (가로, 세로)\n");
      out.write("\n");
      out.write("           }\n");
      out.write("\n");
      out.write("           marker = new google.maps.Marker({\n");
      out.write("             map: resultMap,\n");
      out.write("             position: result[0].geometry.location,\n");
      out.write("             icon: image,\n");
      out.write("             label: {\n");
      out.write("               text: (markers.length+1).toString(),\n");
      out.write("               fontSize: \"30px\",\n");
      out.write("               fontWeight: \"bold\",\n");
      out.write("               color: '#ffffff',\n");
      out.write("               labelOrigin: new google.maps.Point(30, 30)\n");
      out.write("             }\n");
      out.write("           });\n");
      out.write("\n");
      out.write("           markers.push(marker);\n");
      out.write("\n");
      out.write("           console.log('위도:', marker.position.lat());\n");
      out.write("           console.log('경도:', marker.position.lng());\n");
      out.write("\n");
      out.write("           updatePolyline();\n");
      out.write("\n");
      out.write("         } else {\n");
      out.write("           alert('지오코드가 다음의 이유로 성공하지 못했습니다: ' + status);\n");
      out.write("         }\n");
      out.write("       });\n");
      out.write("     }\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("     function updatePolyline() {\n");
      out.write("       console.log(\"update\")\n");
      out.write("       var path = markers.map(marker => marker.getPosition());\n");
      out.write("\n");
      out.write("       console.log(\"path 값 : \", markers);\n");
      out.write("\n");
      out.write("       if (flightPath) {\n");
      out.write("           flightPath.setMap(null);\n");
      out.write("         }\n");
      out.write("       \n");
      out.write("       flightPath = new google.maps.Polyline({\n");
      out.write("         path: path,\n");
      out.write("         geodesic: true,\n");
      out.write("         strokeColor: \"#FF0000\",\n");
      out.write("         strokeOpacity: 1.0,\n");
      out.write("         strokeWeight: 2\n");
      out.write("       });\n");
      out.write("\n");
      out.write("       flightPath.setMap(map);\n");
      out.write("     }\n");
      out.write("\n");
      out.write("     function deleteMarker(index) {\n");
      out.write("       if (markers[index]) {\n");
      out.write("         markers[index].setMap(null);\n");
      out.write("         markers.splice(index, 1);\n");
      out.write("         relabelMarkers();\n");
      out.write("         updatePolyline();\n");
      out.write("       }\n");
      out.write("     }\n");
      out.write("\n");
      out.write("     function relabelMarkers(){\n");
      out.write("     	markers.forEach((marker, i) => {\n");
      out.write("     		marker.setLabel({\n");
      out.write("     			text:(i+1).toString(),\n");
      out.write("     			fontSize: \"30px\",\n");
      out.write("     	        fontWeight: \"bold\",\n");
      out.write("     	        color: '#ffffff',\n");
      out.write("     	        labelOrigin: new google.maps.Point(30, 30)\n");
      out.write("     		})\n");
      out.write("     	})\n");
      out.write("     }\n");
      out.write("   }\n");
      out.write("\n");
      out.write("   document.addEventListener('DOMContentLoaded', myMap);\n");
      out.write("</script>\n");
      out.write("\n");
      out.write("<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js\"></script>\n");
      out.write("<script type=\"text/javascript\">\n");
      out.write("\n");
      out.write("   $(document).ready(function(){\n");
      out.write("\n");
      out.write("	   var totalMinute = 0;\n");
      out.write("	   var totalHour = 0;\n");
      out.write("         var list = [];\n");
      out.write("         var daysDiff = 0;\n");
      out.write("         var sleepName = [];\n");
      out.write("         \n");
      out.write("      $(\".checkBtn\").on(\"click\",function(e){\n");
      out.write("         \n");
      out.write("         var content_id = $(this).siblings().find(\".contentNameBtn\").text();\n");
      out.write("         var contentType = $(this).siblings(\".contentType\").data(\"content-type\");\n");
      out.write("         var addr2 = $(this).siblings(\".contentAdd\").data(\"content-addr2\");\n");
      out.write("         var playTime = $(\".contentTime\").val();\n");
      out.write("         console.log(\"content_id값\" + content_id)\n");
      out.write("         \n");
      out.write("         console.log('플레이 타임의 값' + playTime)\n");
      out.write("         \n");
      out.write("          if(playTime === null || playTime === \"\" || playTime === undefined){\n");
      out.write("        	  playTime = \"02:00\";\n");
      out.write("          } \n");
      out.write("         console.log('playTime if문 거친 후' + playTime)\n");
      out.write("         list.push({\n");
      out.write("            content_id : content_id,\n");
      out.write("            contentType : contentType,\n");
      out.write("            addr2 : addr2,\n");
      out.write("            playTime : playTime\n");
      out.write("         })\n");
      out.write("          $(\".chooseContent\").find(\"input[name='content_id_c']\").val(content_id);\n");
      out.write("         $(\".chooseContent\").find(\"input[name='contentName']\").val(contentType);\n");
      out.write("         $(\".chooseContent\").find(\"input[name='contentTypes']\").val(addr2);\n");
      out.write("         $(\".chooseContent\").find(\"input[name='contentTime']\").val(playTime) \n");
      out.write("         \n");
      out.write("         updateHtml();\n");
      out.write("         RunTimeSet();\n");
      out.write("         RunTimeCalculate();\n");
      out.write("         $(\".contentTime\").on(\"change\", function() {\n");
      out.write("        	 RunTimeCalculate();\n");
      out.write("        	 RunTimeSet();\n");
      out.write("        	 RunTimeCalculate();\n");
      out.write("	        });\n");
      out.write("         \n");
      out.write("      })\n");
      out.write("      var totalRunTimes = [];\n");
      out.write("      function RunTimeSet(){\n");
      out.write("    	  totalRunTimes=[];\n");
      out.write("    	  $(\".contentTime\").each(function() {\n");
      out.write("        	  \n");
      out.write("    		    totalRunTimes.push($(this).val());\n");
      out.write("    		    \n");
      out.write("    		    for(var i = 0; i < totalRunTimes.length; i++){\n");
      out.write("    		    	console.log('전체 런타임'	+totalRunTimes[i])\n");
      out.write("    		    }\n");
      out.write("    		    \n");
      out.write("    		});\n");
      out.write("    	  \n");
      out.write("    	  \n");
      out.write("      }\n");
      out.write("      \n");
      out.write("     function RunTimeCalculate() {\n");
      out.write("    var runTime = document.getElementsByClassName('contentTime');\n");
      out.write("    var totalMinutes = 0;\n");
      out.write("    var totalTime = 0;\n");
      out.write("    for (var i = 0; i < runTime.length; i++) {\n");
      out.write("        var timeValue = runTime[i].value;\n");
      out.write("        console.log(\"runTime \" + i + \"번째 value: \" + timeValue);\n");
      out.write("        totalMinutes += convertToMinutes(timeValue);\n");
      out.write("    }\n");
      out.write("    \n");
      out.write("    totalTime = convertToHoursMinutes(totalMinutes);\n");
      out.write("    console.log(\"총합 시간: \" + totalTime.hours + \"시간 \" + totalTime.minutes + \"분\");\n");
      out.write("\n");
      out.write("    if (totalTime.hours > totalHour) {\n");
      out.write("        alert(\"여행 총 시간보다 장소의 총 시간이 클 수 없습니다\");\n");
      out.write("    } else {\n");
      out.write("        var str = \"<p id='runCount'>\" + runTime.length + \"</p>&nbsp;&nbsp;\" + totalTime.hours + \"시간 \" + totalTime.minutes + \"분 / \" + totalHour + \"시간 \" + totalMinute + \"분\";\n");
      out.write("        document.getElementById(\"totalRunTime\").innerHTML = str;\n");
      out.write("    }\n");
      out.write("}\n");
      out.write("\n");
      out.write("// Helper functions\n");
      out.write("function convertToMinutes(time) {\n");
      out.write("    var parts = time.split(':');\n");
      out.write("    var hours = parseInt(parts[0]);\n");
      out.write("    var minutes = parseInt(parts[1]);\n");
      out.write("    return (hours * 60) + minutes;\n");
      out.write("}\n");
      out.write("\n");
      out.write("function convertToHoursMinutes(totalMinutes) {\n");
      out.write("    var hours = Math.floor(totalMinutes / 60);\n");
      out.write("    var minutes = totalMinutes % 60;\n");
      out.write("    return { hours: hours, minutes: minutes };\n");
      out.write("}\n");
      out.write("\n");
      out.write("      \n");
      out.write("   \n");
      out.write("      function updateHtml() {\n");
      out.write("            var str = \"\";\n");
      out.write("            for (var i = 0; i < list.length; i++) {\n");
      out.write("                str += \"<div class='contentItem'>\";\n");
      out.write("                str += \"<input name='c_number' value='\" + (i + 1) + \"' style='width:20px; background-color:skyblue;'>\";\n");
      out.write("                str += \"<input name='contentName\"  + \"' value='\" + list[i].content_id + \"' style='border:none;'>\";\n");
      out.write("                str += \"<input name='contentTypes\" + \"' value='\" + list[i].contentType + \"' style='border:none;'>\";\n");
      out.write("                str += \"<input name='address\"  + \"' value='\" + list[i].addr2 + \"' style='border:none;'>\";\n");
      out.write("                console.log('playTime값 2번 체크' + list[i].playTime)\n");
      out.write("                if(totalRunTimes[i] === \"\" || totalRunTimes[i] === null || totalRunTimes[i] === undefined){\n");
      out.write("                	console.log('트루문 찍힘')\n");
      out.write("                str += \"<input type='text' name='playTime' pattern=''\\d{2}:\\d{2}' placeholder='HH:MM' value='02:00' title='올바른 형식으로 입력하세요 (HH:MM)' class='contentTime'>\";\n");
      out.write("                }else{\n");
      out.write("                	console.log('false문 찍힘')\n");
      out.write("                str += \"<input type='text' name='playTime' pattern=''\\d{2}:\\d{2}' placeholder='HH:MM' value='\"+ totalRunTimes[i] +\"' title='올바른 형식으로 입력하세요 (HH:MM)' class='contentTime'>\";}\n");
      out.write("                str += \"<button class='deleteBtn' data-index='\" + i + \"'>삭제</button>\";\n");
      out.write("                str += \"</div>\";	\n");
      out.write("            }\n");
      out.write("            $(\".chooseContent\").html(str);\n");
      out.write("            console.log('list길이값' + list.length)\n");
      out.write("        }\n");
      out.write("      \n");
      out.write("      $(document).on(\"click\", \".dropBtn\", function(){\n");
      out.write("    	  console.log(\"작동은 하니?\")\n");
      out.write("    	list.splice(0, list.length);\n");
      out.write("    	  updateHtml();\n");
      out.write("    	  \n");
      out.write("    	  \n");
      out.write("      });\n");
      out.write("\n");
      out.write("        $(document).on(\"click\", \".deleteBtn\", function() {\n");
      out.write("            var index = $(this).data(\"index\");\n");
      out.write("            list.splice(index, 1);\n");
      out.write("            totalRunTimes.splice(index, 1);\n");
      out.write("            updateHtml();\n");
      out.write("            RunTimeCalculate();\n");
      out.write("            \n");
      out.write("        });\n");
      out.write("      \n");
      out.write("      var modal = $(\".modal\");\n");
      out.write("      \n");
      out.write("         $(\".contentNameBtn\").on(\"click\",function(){\n");
      out.write("            \n");
      out.write("            var content_id = $(this).siblings().find(\".contentNameBtn\").text();\n");
      out.write("            var contentType = $(this).siblings(\".contentType\").data(\"content-type\");\n");
      out.write("            var addr2 = $(this).siblings(\".contentAdd\").data(\"content-addr2\");\n");
      out.write("            \n");
      out.write("            console.log(content_id);\n");
      out.write("            console.log(contentType);\n");
      out.write("            console.log(addr2);\n");
      out.write("            \n");
      out.write("            var modalContentId = modal.find(\"input[name='contentName']\");\n");
      out.write("            var modalContentType = modal.find(\"input[name='contentType']\");\n");
      out.write("            var modalContentAdd = modal.find(\"input[name='contentAdd']\");\n");
      out.write("            \n");
      out.write("            modalContentId.val(content_id);\n");
      out.write("            modalContentType.val(contentType);\n");
      out.write("            modalContentAdd.val(addr2);\n");
      out.write("            \n");
      out.write("            console.log(modalContentId.val());\n");
      out.write("            console.log(modalContentType.val());\n");
      out.write("            console.log(modalContentAdd.val());\n");
      out.write("            \n");
      out.write("            $(\".modal\").show();\n");
      out.write("         })\n");
      out.write("         \n");
      out.write("         $(\".close\").on(\"click\",function(){\n");
      out.write("            $(\".modal\").hide();\n");
      out.write("         })\n");
      out.write("         \n");
      out.write("           function handleClick(event) {\n");
      out.write("            event.preventDefault();\n");
      out.write("            console.log(\"앵커 태그 클릭됨\");\n");
      out.write("            \n");
      out.write("            var checkEvent = '숙소';\n");
      out.write("            \n");
      out.write("\n");
      out.write("        }\n");
      out.write("         \n");
      out.write("         $(\".step1\").on(\"click\", function(){\n");
      out.write("\n");
      out.write("             var dayElement = document.getElementById(\"day\");\n");
      out.write("             var placeElement = document.getElementById(\"place\");\n");
      out.write("             var placeElement2 = document.getElementById(\"place2\");\n");
      out.write("             var sleepElement = document.getElementById(\"sleep\");\n");
      out.write("             var sleepElement2 = document.getElementById(\"sleep2\");\n");
      out.write("             \n");
      out.write("             dayElement.style.display =\"block\";\n");
      out.write("             placeElement.style.display = \"none\";\n");
      out.write("             placeElement2.style.display = \"none\"; \n");
      out.write("             sleepElement.style.display = \"none\";\n");
      out.write("             sleepElement2.style.display = \"none\";\n");
      out.write("         })\n");
      out.write("         \n");
      out.write("         \n");
      out.write("         $(\".step2\").on(\"click\", function(){\n");
      out.write("        console.log('테스트1');	 \n");
      out.write("        var dayElement = document.getElementById(\"day\");\n");
      out.write("        var placeElement = document.getElementById(\"place\");\n");
      out.write("        var placeElement2 = document.getElementById(\"place2\");\n");
      out.write("        var sleepElement = document.getElementById(\"sleep\");\n");
      out.write("        var sleepElement2 = document.getElementById(\"sleep2\");\n");
      out.write("\n");
      out.write("        dayElement.style.display =\"none\";\n");
      out.write("        placeElement.style.display = \"block\";\n");
      out.write("        placeElement2.style.display = \"block\"; \n");
      out.write("        sleepElement.style.display = \"none\";\n");
      out.write("        sleepElement2.style.display = \"none\";\n");
      out.write("         });\n");
      out.write("         \n");
      out.write("         $(\".step3\").on(\"click\", function(){\n");
      out.write("        	 console.log(\"테스트2\")\n");
      out.write("             var dayElement = document.getElementById(\"day\");\n");
      out.write("             var placeElement = document.getElementById(\"place\");\n");
      out.write("             var placeElement2 = document.getElementById(\"place2\");\n");
      out.write("             var sleepElement = document.getElementById(\"sleep\"); \n");
      out.write("             var sleepElement2 = document.getElementById(\"sleep2\");\n");
      out.write("\n");
      out.write("             dayElement.style.display =\"none\";\n");
      out.write("             placeElement.style.display = \"none\";\n");
      out.write("             placeElement2.style.display = \"none\"; \n");
      out.write("             sleepElement.style.display = \"block\";\n");
      out.write("             sleepElement2.style.display = \"block\";\n");
      out.write("             updateSleep()\n");
      out.write("         })\n");
      out.write("         var datesBetween;\n");
      out.write("         $(\"#selectDay\").on(\"click\", function(){\n");
      out.write("        	 var appComponent = ReactDOM.render(React.createElement(APP, null), document.querySelector('#app'));\n");
      out.write("        	    var selectionStart = appComponent.state.selectionStart;\n");
      out.write("        	    var selectionEnd = appComponent.state.selectionEnd;\n");
      out.write("        	    console.log(\"끝\" + selectionEnd)\n");
      out.write("        	    console.log(\"시작\" + selectionStart)\n");
      out.write("        	    var milliseconds = selectionStart;\n");
      out.write("        	    var startDate = new Date(milliseconds);\n");
      out.write("        	    console.log(startDate);\n");
      out.write("        	    \n");
      out.write("        	    var milliseconds = selectionEnd;\n");
      out.write("        	    var endDate = new Date(milliseconds);\n");
      out.write("        	    console.log(\"포맷 전\"+ endDate);\n");
      out.write("        	    \n");
      out.write("        	    var startDateFormatted = formatDate(startDate);\n");
      out.write("        	    var endDateFormatted = formatDate(endDate);\n");
      out.write("        	    \n");
      out.write("        	    datesBetween = getDatesWithDay(startDate, endDate);\n");
      out.write("        	    console.log(datesBetween);\n");
      out.write("        	    \n");
      out.write("        	    var dateStr =\"\";\n");
      out.write("        	    for(var i = 0; i < datesBetween.length; i++){\n");
      out.write("        	    	dateStr += \"<li><input type ='text' name ='day' value='\" + datesBetween[i].date + \"'></li>\";\n");
      out.write("        	    }\n");
      out.write("        	    $(\".date2\").html(dateStr);\n");
      out.write("        	    \n");
      out.write("        	    console.log(\"date확인\" + datesBetween)\n");
      out.write("        	    \n");
      out.write("        	    var dateStr2 = \"\";\n");
      out.write("        	    for(var i = 0; i < datesBetween.length; i++){\n");
      out.write("        	    	dateStr2 += \"<li><input type='text' name='dayOfWeek' value='\" + datesBetween[i].dayOfWeek + \"'></li>\";\n");
      out.write("        	    }\n");
      out.write("        	    $(\".date3\").html(dateStr2);\n");
      out.write("        	    \n");
      out.write("        	    var dateStr3 = \"\";\n");
      out.write("        	    for(var i = 0; i < datesBetween.length; i++){\n");
      out.write("        	    	dateStr3 += \"<li><input type = 'time' name='startTime' value='10:00' class='timeInputStart\"+ i + \"'></li>\";\n");
      out.write("        	    }\n");
      out.write("        	    $(\".date4\").html(dateStr3)\n");
      out.write("        	    \n");
      out.write("        	    	var dateStr4 = \"\";\n");
      out.write("            	    for(var i = 0; i < datesBetween.length; i++){\n");
      out.write("            	    	dateStr4 += \"<li><input type='time' name='endTime' value='22:00' class='timeInputEnd\" + i + \"'></li>\";\n");
      out.write("            	    }\n");
      out.write("            	$(\".date5\").html(dateStr4);\n");
      out.write("            	\n");
      out.write("        	    var startMillis = startDate.getTime();\n");
      out.write("        	    var endMillis = endDate.getTime();\n");
      out.write("\n");
      out.write("        	    var timeDiff = Math.abs(endMillis - startMillis);\n");
      out.write("        	    \n");
      out.write("        	    //숙소 개수 정할 때\n");
      out.write("        	     daysDiff = Math.ceil(timeDiff / (1000 * 3600 * 24)); \n");
      out.write("        	    //총 일 수\n");
      out.write("        	   var totalDays = daysDiff + 1;\n");
      out.write("        	    \n");
      out.write("        	    console.log('사이 날짜 값'+ daysDiff)\n");
      out.write("        	    \n");
      out.write("        	    console.log('총 일 수 ' + totalDays)\n");
      out.write("        	    timeCalculate(datesBetween)\n");
      out.write("        	     for (var i = 0; i < datesBetween.length; i++) {\n");
      out.write("        	    (function(index) {\n");
      out.write("        	        var selector = \".timeInputStart\" + index;\n");
      out.write("        	        var selector2 = \".timeInputEnd\" + index;\n");
      out.write("        	        $(selector).on(\"change\", function() {\n");
      out.write("        	        	timeCalculate()\n");
      out.write("        	        });\n");
      out.write("        	        \n");
      out.write("        	        $(selector2).on(\"change\", function(){\n");
      out.write("        	        	timeCalculate()\n");
      out.write("        	        });\n");
      out.write("        	        \n");
      out.write("        	    })(i);\n");
      out.write("        	}\n");
      out.write("        	    \n");
      out.write("        	    $(\"#daysdiff\").text(\"총 숙박 날\" + daysDiff + \"일\");\n");
      out.write("        	    \n");
      out.write("        	    $(\"#dateRange\").text(startDateFormatted + \" ~ \" + endDateFormatted);\n");
      out.write("        	    console.log('이쪽까지 동작을 안하나요')\n");
      out.write("        	    $('#modal-toggle').prop('checked', false);\n");
      out.write("         })\n");
      out.write("         \n");
      out.write("        function timeCalculate() {\n");
      out.write("        	 totalHour = 0;\n");
      out.write("        	 totalMinute = 0;\n");
      out.write("\n");
      out.write("    for (var i = 0; i < datesBetween.length; i++) {\n");
      out.write("        var startTime = $(\".timeInputStart\" + i).val();\n");
      out.write("        var endTime = $(\".timeInputEnd\" + i).val();\n");
      out.write("        console.log('테스트 시작' + startTime)\n");
      out.write("        console.log('테스트 끝' + endTime)\n");
      out.write("        \n");
      out.write("        var startParts = startTime.split(':');\n");
      out.write("        var endParts = endTime.split(':');\n");
      out.write("        var startHour = parseInt(startParts[0]);\n");
      out.write("        var startMinute = parseInt(startParts[1]);\n");
      out.write("        var endHour = parseInt(endParts[0]);\n");
      out.write("        var endMinute = parseInt(endParts[1]);\n");
      out.write("\n");
      out.write("        \n");
      out.write("        // 시간 차이 계산\n");
      out.write("        var diffHour = endHour - startHour;\n");
      out.write("        var diffMinute = endMinute - startMinute;\n");
      out.write("\n");
      out.write("        console.log('시간 차' + diffHour)\n");
      out.write("        console.log('diffMinute값' +diffMinute )\n");
      out.write("        \n");
      out.write("        \n");
      out.write("        // 음수 방지를 위한 보정\n");
      out.write("        if (diffMinute < 0) {\n");
      out.write("            diffHour--; // 시간을 1 시간 감소\n");
      out.write("            diffMinute += 60; // 음수를 방지하기 위해 분에 60을 더함\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        totalHour += diffHour;\n");
      out.write("        totalMinute += diffMinute;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    console.log(\"총합 시간: \" + totalHour);\n");
      out.write("    console.log(\"총합 분: \" + totalMinute);\n");
      out.write("\n");
      out.write("    // 분이 60 이상인 경우 시간으로 환산\n");
      out.write("    totalHour += Math.floor(totalMinute / 60);\n");
      out.write("    totalMinute %= 60;\n");
      out.write("\n");
      out.write("    console.log(\"총합 시간 (조정): \" + totalHour);\n");
      out.write("    console.log(\"총합 분 (조정): \" + totalMinute);\n");
      out.write("    \n");
      out.write("    $(\".totalTime\").val(\"총시간 \" + totalHour + \"시간 \" + totalMinute + \"분 입니다.\");  \n");
      out.write("    \n");
      out.write("    \n");
      out.write("    \n");
      out.write("}\n");
      out.write("         $(\".checkInBtn\").on(\"click\",function(){\n");
      out.write("        	 \n");
      out.write("        	 var content_id = $(this).siblings().find(\".contentNameBtn\").text();\n");
      out.write("        	 \n");
      out.write("        	 console.log('content_id 숙소 값' + content_id)\n");
      out.write("        	 sleepName.push({\n");
      out.write("        		content_id : content_id || undefined\n");
      out.write("        	 })\n");
      out.write("        	 for(var i = 0; i < sleepName.length; i++){\n");
      out.write("        	 console.log('sleepName배열' + sleepName[i].content_id)\n");
      out.write("        	 }\n");
      out.write("        	 updateSleep()\n");
      out.write("        	 \n");
      out.write("         })\n");
      out.write("         \n");
      out.write("         \n");
      out.write("        function updateSleep(){\n");
      out.write("        	 console.log('updateSleep')\n");
      out.write("        	 var str = \"\";\n");
      out.write("        	 console.log(\"확인 1번 값\" + daysDiff)\n");
      out.write("        	 console.log(\"확인 2번 값\" + datesBetween[0].date)\n");
      out.write("        	 for(var i = 0; i < daysDiff; i++){\n");
      out.write("        		 var q = i + 1;\n");
      out.write("        		 console.log('되겠죠'+ q)\n");
      out.write("        		 console.log(\"안찍혀 이게?\")\n");
      out.write("        		 str += \"<div class='sleepItem'>\";\n");
      out.write("        		 str += q + \" \" + datesBetween[i].date + \"(\"+ datesBetween[i].dayOfWeek +\")~\" + datesBetween[q].date + \"(\"+ datesBetween[q].dayOfWeek +\")\";\n");
      out.write("        		 if(sleepName[i] === undefined || sleepName[i].content_id === undefined){\n");
      out.write("        			 console.log('true문 통과')\n");
      out.write("        			 str += \"<input type ='text' value='숙소를 추가해주세요.'>\"	 \n");
      out.write("        		 }else{\n");
      out.write("        		 str += \"<input type ='text' name='sleepName' value='\"+ sleepName[i].content_id +\"'>\"}\n");
      out.write("        		 str += \"<button class ='deleteBtn2'>삭제</button></div>\"\n");
      out.write("        		 \n");
      out.write("        	 }$(\".chooseSleep\").html(str);\n");
      out.write("         }\n");
      out.write("        \n");
      out.write("         $(\".chooseSleep\").on(\"click\", \".deleteBtn2\", function(){\n");
      out.write("        	 console.log('숙소 삭제')\n");
      out.write("        	sleepName = [];\n");
      out.write("        	updateSleep();\n");
      out.write("        	 \n");
      out.write("         })\n");
      out.write("        	 \n");
      out.write("        	 \n");
      out.write("         \n");
      out.write("         function formatDate(date) {\n");
      out.write("    var year = date.getFullYear();\n");
      out.write("    var month = (\"0\" + (date.getMonth() + 1)).slice(-2);\n");
      out.write("    var day = (\"0\" + date.getDate()).slice(-2);\n");
      out.write("    var dayOfWeek = [\"일\", \"월\", \"화\", \"수\", \"목\", \"금\", \"토\"][date.getDay()];\n");
      out.write("    return year + \"-\" + month + \"-\" + day + \"(\" + dayOfWeek + \")\";\n");
      out.write("}\n");
      out.write("         \n");
      out.write("         function getDatesWithDay(startDate, endDate) {\n");
      out.write("             const daysOfWeek = ['일', '월', '화', '수', '목', '금', '토'];\n");
      out.write("             const dates = [];\n");
      out.write("             let currentDate = new Date(startDate);\n");
      out.write("\n");
      out.write("             while (currentDate <= new Date(endDate)) {\n");
      out.write("            	 const isoString = currentDate.toISOString();\n");
      out.write("            	 const monthDayStr = isoString.slice(5, 7) + \"/\" + isoString.slice(8, 10); // 월과 일만 추출하여 /로 구분\n");
      out.write("                 const dayOfWeek = daysOfWeek[currentDate.getDay()];\n");
      out.write("                 dates.push({ date: monthDayStr, dayOfWeek: dayOfWeek });\n");
      out.write("                 currentDate.setDate(currentDate.getDate() + 1);\n");
      out.write("             }\n");
      out.write("\n");
      out.write("             return dates;\n");
      out.write("         }\n");
      out.write("         \n");
      out.write("         $(\".objsubmit\").on(\"click\", function(){\n");
      out.write("        	 console.log('작동')\n");
      out.write("        	 let placesForm = $(\"#places\"); \n");
      out.write("        	 \n");
      out.write("        	 placesForm.submit();\n");
      out.write("        	 \n");
      out.write("        	\n");
      out.write("         \n");
      out.write("         \n");
      out.write(" \n");
      out.write("         \n");
      out.write("         \n");
      out.write("  \n");
      out.write("   })\n");
      out.write("   \n");
      out.write("   })\n");
      out.write("   </script>\n");
      out.write("<script src=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyD-nI2V_bsNjQF5ZQ4mlq8o8sr1oZ6bLi0&libraries=places&callback=myMap\"></script>\n");
      out.write("  \n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }

  private boolean _jspx_meth_c_005fforEach_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:forEach
    org.apache.taglibs.standard.tag.rt.core.ForEachTag _jspx_th_c_005fforEach_005f0 = (org.apache.taglibs.standard.tag.rt.core.ForEachTag) _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.get(org.apache.taglibs.standard.tag.rt.core.ForEachTag.class);
    boolean _jspx_th_c_005fforEach_005f0_reused = false;
    try {
      _jspx_th_c_005fforEach_005f0.setPageContext(_jspx_page_context);
      _jspx_th_c_005fforEach_005f0.setParent(null);
      // /WEB-INF/views/plan/place.jsp(232,6) name = var type = java.lang.String reqTime = false required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fforEach_005f0.setVar("content");
      // /WEB-INF/views/plan/place.jsp(232,6) name = items type = javax.el.ValueExpression reqTime = true required = false fragment = false deferredValue = true expectedTypeName = java.lang.Object deferredMethod = false methodSignature = null
      _jspx_th_c_005fforEach_005f0.setItems(new org.apache.jasper.el.JspValueExpression("/WEB-INF/views/plan/place.jsp(232,6) '${list}'",_jsp_getExpressionFactory().createValueExpression(_jspx_page_context.getELContext(),"${list}",java.lang.Object.class)).getValue(_jspx_page_context.getELContext()));
      int[] _jspx_push_body_count_c_005fforEach_005f0 = new int[] { 0 };
      try {
        int _jspx_eval_c_005fforEach_005f0 = _jspx_th_c_005fforEach_005f0.doStartTag();
        if (_jspx_eval_c_005fforEach_005f0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
          do {
            out.write("\n");
            out.write("         <div class=\"d-flex w-100 align-items-center justify-content-between\">\n");
            out.write("         <hr>\n");
            out.write("         <b><button class=\"contentNameBtn\" style=\"width:100px;\" data-content-id=\"");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${content.content_id}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write('"');
            out.write('>');
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${content.content_id}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("</button></b>\n");
            out.write("         <input class=\"contentType\" type=\"text\" data-content-type=\"");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${content.contentType}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("\" value=\"");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${content.contentType}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("\" readonly=\"readonly\">\n");
            out.write("        <br><input id=\"addr2\" class=\"contentAdd\" type=\"text\" data-content-addr2=\"");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${content.addr2}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("\" value=\"");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${content.addr2}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("\" readonly=\"readonly\">\n");
            out.write("         <button type=\"button\" id=\"checkBtn\" class=\"checkBtn\" >+</button>\n");
            out.write("         <hr>\n");
            out.write("      </div>\n");
            out.write("      ");
            int evalDoAfterBody = _jspx_th_c_005fforEach_005f0.doAfterBody();
            if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
              break;
          } while (true);
        }
        if (_jspx_th_c_005fforEach_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
          return true;
        }
      } catch (java.lang.Throwable _jspx_exception) {
        while (_jspx_push_body_count_c_005fforEach_005f0[0]-- > 0)
          out = _jspx_page_context.popBody();
        _jspx_th_c_005fforEach_005f0.doCatch(_jspx_exception);
      } finally {
        _jspx_th_c_005fforEach_005f0.doFinally();
      }
      _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.reuse(_jspx_th_c_005fforEach_005f0);
      _jspx_th_c_005fforEach_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fforEach_005f0, _jsp_getInstanceManager(), _jspx_th_c_005fforEach_005f0_reused);
    }
    return false;
  }

  private boolean _jspx_meth_c_005fforEach_005f1(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:forEach
    org.apache.taglibs.standard.tag.rt.core.ForEachTag _jspx_th_c_005fforEach_005f1 = (org.apache.taglibs.standard.tag.rt.core.ForEachTag) _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.get(org.apache.taglibs.standard.tag.rt.core.ForEachTag.class);
    boolean _jspx_th_c_005fforEach_005f1_reused = false;
    try {
      _jspx_th_c_005fforEach_005f1.setPageContext(_jspx_page_context);
      _jspx_th_c_005fforEach_005f1.setParent(null);
      // /WEB-INF/views/plan/place.jsp(298,6) name = var type = java.lang.String reqTime = false required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fforEach_005f1.setVar("content");
      // /WEB-INF/views/plan/place.jsp(298,6) name = items type = javax.el.ValueExpression reqTime = true required = false fragment = false deferredValue = true expectedTypeName = java.lang.Object deferredMethod = false methodSignature = null
      _jspx_th_c_005fforEach_005f1.setItems(new org.apache.jasper.el.JspValueExpression("/WEB-INF/views/plan/place.jsp(298,6) '${sleep}'",_jsp_getExpressionFactory().createValueExpression(_jspx_page_context.getELContext(),"${sleep}",java.lang.Object.class)).getValue(_jspx_page_context.getELContext()));
      int[] _jspx_push_body_count_c_005fforEach_005f1 = new int[] { 0 };
      try {
        int _jspx_eval_c_005fforEach_005f1 = _jspx_th_c_005fforEach_005f1.doStartTag();
        if (_jspx_eval_c_005fforEach_005f1 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
          do {
            out.write("\n");
            out.write("         <div class=\"d-flex w-100 align-items-center justify-content-between\">\n");
            out.write("         <hr>\n");
            out.write("         ");
            if (_jspx_meth_c_005fif_005f0(_jspx_th_c_005fforEach_005f1, _jspx_page_context, _jspx_push_body_count_c_005fforEach_005f1))
              return true;
            out.write("\n");
            out.write("      </div>\n");
            out.write("      ");
            int evalDoAfterBody = _jspx_th_c_005fforEach_005f1.doAfterBody();
            if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
              break;
          } while (true);
        }
        if (_jspx_th_c_005fforEach_005f1.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
          return true;
        }
      } catch (java.lang.Throwable _jspx_exception) {
        while (_jspx_push_body_count_c_005fforEach_005f1[0]-- > 0)
          out = _jspx_page_context.popBody();
        _jspx_th_c_005fforEach_005f1.doCatch(_jspx_exception);
      } finally {
        _jspx_th_c_005fforEach_005f1.doFinally();
      }
      _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.reuse(_jspx_th_c_005fforEach_005f1);
      _jspx_th_c_005fforEach_005f1_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fforEach_005f1, _jsp_getInstanceManager(), _jspx_th_c_005fforEach_005f1_reused);
    }
    return false;
  }

  private boolean _jspx_meth_c_005fif_005f0(javax.servlet.jsp.tagext.JspTag _jspx_th_c_005fforEach_005f1, javax.servlet.jsp.PageContext _jspx_page_context, int[] _jspx_push_body_count_c_005fforEach_005f1)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:if
    org.apache.taglibs.standard.tag.rt.core.IfTag _jspx_th_c_005fif_005f0 = (org.apache.taglibs.standard.tag.rt.core.IfTag) _005fjspx_005ftagPool_005fc_005fif_0026_005ftest.get(org.apache.taglibs.standard.tag.rt.core.IfTag.class);
    boolean _jspx_th_c_005fif_005f0_reused = false;
    try {
      _jspx_th_c_005fif_005f0.setPageContext(_jspx_page_context);
      _jspx_th_c_005fif_005f0.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_c_005fforEach_005f1);
      // /WEB-INF/views/plan/place.jsp(301,9) name = test type = boolean reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fif_005f0.setTest(((java.lang.Boolean) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${content.contentType == '숙소'}", boolean.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null)).booleanValue());
      int _jspx_eval_c_005fif_005f0 = _jspx_th_c_005fif_005f0.doStartTag();
      if (_jspx_eval_c_005fif_005f0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
        do {
          out.write("\n");
          out.write("         <b><button class=\"contentNameBtn\" style=\"width:100px;\" data-content-id=\"");
          out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${content.content_id}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
          out.write('"');
          out.write('>');
          out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${content.content_id}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
          out.write("</button></b>\n");
          out.write("         <input class=\"contentType\" type=\"text\" data-content-type=\"");
          out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${content.contentType}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
          out.write("\" value=\"");
          out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${content.contentType}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
          out.write("\" readonly=\"readonly\">\n");
          out.write("        <br><input id=\"addr2\" class=\"contentAdd\" type=\"text\" data-content-addr2=\"");
          out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${content.addr2}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
          out.write("\" value=\"");
          out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${content.addr2}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
          out.write("\" readonly=\"readonly\">\n");
          out.write("         <button type=\"button\" class=\"checkInBtn\" class=\"checkInBtn\" >+</button>\n");
          out.write("         <hr>\n");
          out.write("         ");
          int evalDoAfterBody = _jspx_th_c_005fif_005f0.doAfterBody();
          if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
            break;
        } while (true);
      }
      if (_jspx_th_c_005fif_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005fif_0026_005ftest.reuse(_jspx_th_c_005fif_005f0);
      _jspx_th_c_005fif_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fif_005f0, _jsp_getInstanceManager(), _jspx_th_c_005fif_005f0_reused);
    }
    return false;
  }
}
