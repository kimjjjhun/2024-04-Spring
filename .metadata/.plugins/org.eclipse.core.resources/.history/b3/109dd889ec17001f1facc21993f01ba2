package kr.trip.controller;

import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import kr.trip.domain.BoardVO;
import kr.trip.domain.BoardlikeVO;
import kr.trip.domain.Criteria;
import kr.trip.domain.PageDTO;
import kr.trip.service.BoardService;
import lombok.RequiredArgsConstructor;
import lombok.extern.log4j.Log4j;

@Controller // 컨트롤러
@Log4j
@RequiredArgsConstructor // 생성자주입
@RequestMapping("/board/*") // board/로 시작하면 여기 보드컨트롤러가 동작함
public class BoardController {
	
	private final BoardService boardService;
	 
	@GetMapping("/list")
	public void list(Criteria cri, Model model) {

		model.addAttribute("list", boardService.getList(cri));

		int total = boardService.getTotal(cri);

		model.addAttribute("pageMaker", new PageDTO(cri, total));
	}
	
	@GetMapping("/register")  //  WEB_INF/views/board/register.jsp
	@PreAuthorize("isAuthenticated()")
	public void register() {
		
	}
	
	@PostMapping("/register")
	@PreAuthorize("isAuthenticated()")
	public String register(BoardVO board, RedirectAttributes rttr) {
	    log.info("register......." + board);
	    boardService.register(board);

	    rttr.addFlashAttribute("result", board.getBoard_id());
	
	return "redirect:/board/list";   //views/board/list.jsp
}
			
	@GetMapping({ "/get", "/modify" })
	public void get(@RequestParam("board_id") int board_id, @ModelAttribute("cri") Criteria cri, Model model) {

		log.info(cri);
		model.addAttribute("board", boardService.get(board_id));
	}
	@PreAuthorize("principal.username == #board.member_email")
	@PostMapping("/modify")
	public String modify(BoardVO board, @ModelAttribute("cri") Criteria cri, RedirectAttributes rttr) {

		if (boardService.modify(board)) {
			rttr.addAttribute("result", "modify");
		}

		rttr.addAttribute("pageNum", cri.getPageNum());
		rttr.addAttribute("amount", cri.getAmount());
		rttr.addAttribute("type", cri.getType());
		rttr.addAttribute("keyword", cri.getKeyword());

		return "redirect:/board/list";
	}
	@PreAuthorize("principal.username == #member_email")
	@PostMapping("/remove")
	public String remove(@RequestParam("board_id") int board_id, @ModelAttribute("cri") Criteria cri,
			RedirectAttributes rttr, @RequestParam("member_email") String member_email) {
		
		if (boardService.remove(board_id)) {
			rttr.addFlashAttribute("result", "delete");
		}

		rttr.addAttribute("pageNum", cri.getPageNum());
		rttr.addAttribute("amount", cri.getAmount());
		rttr.addAttribute("type", cri.getType());
		rttr.addAttribute("keyword", cri.getKeyword());

		return "redirect:/board/list";
	}

	// 게시물 좋아요
	@ResponseBody
	@PostMapping(value = "/addlike", consumes = "application/json", produces = { MediaType.TEXT_PLAIN_VALUE })
	public ResponseEntity<String> addLike(@RequestBody BoardlikeVO like) {
		int likeCount = boardService.addLike(like);
		log.info(likeCount);

		return likeCount == 1 ? new ResponseEntity<String>("success", HttpStatus.OK)
				: new ResponseEntity<String>(HttpStatus.INTERNAL_SERVER_ERROR);
	}
	
	@GetMapping("/board/{board_id}/like")
	public ResponseEntity<String> checkLikeStatus(@PathVariable int board_id, @RequestParam String member_email) {
	    boolean isLiked = boardService.getCountByboard_like(board_id, member_email);
	    if (isLiked) {
	        return ResponseEntity.ok("게시물이 좋아요되었습니다.");
	    } else {
	        return ResponseEntity.ok("게시물이 좋아요되지 않았습니다.");
	    }
	    
	}
	
	
	@PostMapping(value="/removelike", consumes = "application/json", produces= {MediaType.TEXT_PLAIN_VALUE})
	public ResponseEntity<String>removelike(@RequestBody BoardlikeVO like, RedirectAttributes rttr) {
	    log.info("===================remove==================");
	    
	    boardService.removeLike(like);

	    rttr.addFlashAttribute("isLiked", boardService.getCountByboard_like(like.getBoard_id(), like.getMember_email()));

	    return boardService.removeLike(like) == 1 ? new ResponseEntity<String>("result", HttpStatus.OK):
	    	                                        new ResponseEntity<String>(HttpStatus.INTERNAL_SERVER_ERROR);
	}

	
	
}